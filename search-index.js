var searchIndex = new Map(JSON.parse('[["zkvm",{"t":"HHH","n":["demo_basic_vm","demo_zero_knowledge_proof","main"],"q":[[0,"zkvm"]],"i":"```","f":"{{}b}00","D":"`","p":[[1,"unit"]],"r":[],"b":[],"c":"OjAAAAAAAAA=","e":"OjAAAAEAAAAAAAMAEAAAAAAAAQACAAMA","P":[]}],["zkvm_from_scratch",{"t":"EEEEEEEEEEEEECEECCCCCKIFNNNNNNNMNHHHNNNNNFFNNNNNNNNNNNNNNNONNONONNNNNNNNNNCHHHHCCCFFNNNNNNNNNNNNNNNNOONNOOONOOOOOONNNNNNNNNNFNNNNNNNNNNNNNNNNNNPPPFPPPPGPPNNNNNNNNNNHNNNNNNONNNOOOONNNNNNNNCCCCPPGFPGPPPPPNNNNNNNNNNNNNNNNNNONNNNNNNNNNNNNONNNNNNNNNNNNNNOOOOOOOORFFFKFFFONNNNNNNNNNNNNNNNNNNNNNNNNNNONNNNNNNNNNNNMNOOONNNNNNOONOOONOOOOONNNNNOONNNNNNNNNNNNNNNNNNOOOFFFFFFFNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNOOOONNNNOOONNNNNNOONNNNNNNNOONNNNNNNOOOONOOONNNNNNNNNOONNNNNNNNNNNNNNNNNNNNNOORFFKFNNNNNNNNNNNNNNNNONNNNNNNNNNMNN","n":["ConstraintSystem","ExecutionStep","ExecutionTrace","HashValue","Instruction","MerkleTree","Opcode","Proof","Prover","StarkProver","StarkVerifier","Verifier","VmState","crypto","decode_hex","encode_hex","utils","vm","zkp","hash","merkle","HashFunction","HashValue","SimpleHash","borrow","borrow_mut","clone","clone_into","clone_to_uninit","fmt","from","hash","","hash_bytes","hash_pair","hash_u32","into","to_owned","try_from","try_into","type_id","MerkleProof","MerkleTree","borrow","","borrow_mut","","clone","","clone_into","","clone_to_uninit","","fmt","","from","","generate_proof","index","into","","leaf","new","proof","root","to_owned","","try_from","","try_into","","type_id","","verify_proof","encoding","bytes_to_u32_le","decode_hex","encode_hex","u32_to_bytes_le","execution","memory","opcodes","ExecutionStep","VmState","borrow","","borrow_mut","","clone","","clone_into","","clone_to_uninit","","execute_instruction","execute_with_trace","fmt","","from","","instruction","intermediate_values","into","","memory","memory_reads","memory_writes","new","pc","pc_after","pc_before","registers","registers_after","registers_before","run","run_with_trace","to_owned","","try_from","","try_into","","type_id","","Memory","borrow","borrow_mut","clone","clone_into","clone_to_uninit","fmt","from","into","load_program","new","read_byte","read_word","to_owned","try_from","try_into","type_id","write_byte","write_word","Add","Branch","Div","Instruction","Jump","Load","Mul","Nop","Opcode","Store","Sub","borrow","","borrow_mut","","clone","","clone_into","","clone_to_uninit","","decode_instruction","eq","","fmt","","from","","imm","into","","new","opcode","rd","rs1","rs2","to_owned","","try_from","","try_into","","type_id","","constraints","prover","stark","verifier","Add","Constant","Constraint","ConstraintSystem","Equality","Expression","MemoryConsistency","Mul","RangeCheck","Sub","Variable","add_constraint","add_public_column","add_witness_column","borrow","","","borrow_mut","","","clone","","","clone_into","","","clone_to_uninit","","","constraints","default","evaluate_expression","fmt","","","from","","","generate_constraints_for_trace","into","","","new","public_columns","to_owned","","","try_from","","","try_into","","","type_id","","","verify_constraint","verify_constraints","witness_columns","addr","left","max_bits","right","value","value_read","value_written","Error","ExecutionTrace","MemoryAccess","Proof","ProofSystem","Prover","TraceStep","WitnessData","addr","borrow","","","","","","borrow_mut","","","","","","clone","","","","","clone_into","","","","","clone_to_uninit","","","","","final_state","fmt","","","","","from","","","","","","generate_execution_trace","generate_proof","generate_witness","initial_state","instruction","intermediate_values","into","","","","","","is_write","memory_accesses","new","pc_after","pc_before","private_inputs","prove_execution","public_inputs","registers_after","registers_before","step_index","steps","to_owned","","","","","trace","trace_commitment","try_from","","","","","","try_into","","","","","","type_id","","","","","","value_after","value_before","witness","FriProof","QueryProof","SerializableFriProof","SerializableQueryProof","SerializableStarkProof","StarkProof","StarkProver","borrow","","","","","","","borrow_mut","","","","","","","clone","","","","","","clone_into","","","","","","clone_to_uninit","","","","","","commitments","","constraint_evaluations","","default","deserialize","","","expansion_factor","final_polynomial","","fmt","","","","","","fri_proof","","from","","","","","","","generate_proof","index","","into","","","","","","","merkle_path","","merkle_proof","","new","query_proofs","","security_level","serialize","","","to_owned","","","","","","trace_commitment","","try_from","","","","","","","try_into","","","","","","","type_id","","","","","","","value","","Error","MockVerificationSystem","StarkVerifier","VerificationSystem","Verifier","borrow","","","borrow_mut","","","default","fmt","from","","","into","","","new","","security_level","try_from","","","try_into","","","type_id","","","verify","verify_proof","",""],"q":[[0,"zkvm_from_scratch"],[19,"zkvm_from_scratch::crypto"],[21,"zkvm_from_scratch::crypto::hash"],[41,"zkvm_from_scratch::crypto::merkle"],[74,"zkvm_from_scratch::utils"],[75,"zkvm_from_scratch::utils::encoding"],[79,"zkvm_from_scratch::vm"],[82,"zkvm_from_scratch::vm::execution"],[124,"zkvm_from_scratch::vm::memory"],[143,"zkvm_from_scratch::vm::opcodes"],[187,"zkvm_from_scratch::zkp"],[191,"zkvm_from_scratch::zkp::constraints"],[250,"zkvm_from_scratch::zkp::constraints::Constraint"],[257,"zkvm_from_scratch::zkp::prover"],[357,"zkvm_from_scratch::zkp::stark"],[474,"zkvm_from_scratch::zkp::verifier"],[509,"core::fmt"],[510,"core::result"],[511,"core::any"],[512,"core::option"],[513,"alloc::vec"],[514,"alloc::string"],[515,"std::collections::hash::map"],[516,"serde::de"],[517,"serde::ser"]],"i":"````````````````````````f000000A`1```11111``AlAn10101010101010100101101010101``````````BnC`10101010111010001010011001001110101010`Cd00000000000000000Cf00`0000`000Cb10101010`1010100100000010101010````Cn0``Cl`01011Cj00012012012012012000012012001200012012012012000DdDfDh1022Ed```````DjEbDbDl3DnE`4325103251032510325103325104325104643224325105242214122233251010432510432510432510550```````FfEjElEnF`FbFd6543210543210543210543210415262106415432105265432106306543210305264162105432105265432106543210654321030Gb````G`FlFn210102102102112102102102310","f":"````````````````````````{b{{b{c}}}{}}{{{b{d}}}{{b{dc}}}{}}{{{b{f}}}f}{{b{b{dc}}}h{}}{{bj}h}{{{b{f}}{b{dl}}}n}{cc{}}{{{b{A`}}{b{{Ab{j}}}}}Ad}{{{b{f}}{b{{Ab{j}}}}}Ad}{{{b{{Ab{j}}}}}Ad}{{{b{Ad}}{b{Ad}}}Ad}{AfAd}{{}c{}}{bc{}}{c{{Ah{e}}}{}{}}{{}{{Ah{c}}}{}}{bAj}``{b{{b{c}}}{}}0{{{b{d}}}{{b{dc}}}{}}0{{{b{Al}}}Al}{{{b{An}}}An}{{b{b{dc}}}h{}}0{{bj}h}0{{{b{Al}}{b{dl}}}n}{{{b{An}}{b{dl}}}n}{cc{}}0{{{b{Al}}B`}{{Bb{An}}}}{AnB`}??{AnAd}{{{Bd{{b{{Ab{j}}}}}}}Al}{AnBd}{{{b{Al}}}{{b{Ad}}}}{bc{}}0{c{{Ah{e}}}{}{}}0{{}{{Ah{c}}}{}}0{bAj}0{{{b{Al}}{b{An}}}Bf}`{{{b{{Ab{j}}}}}Af}{{{b{Bh}}}{{Ah{{Bd{j}}{b{Bh}}}}}}{{{b{{Ab{j}}}}}Bj}{Af{{Bl{j}}}}`````{b{{b{c}}}{}}0{{{b{d}}}{{b{dc}}}{}}0{{{b{Bn}}}Bn}{{{b{C`}}}C`}{{b{b{dc}}}h{}}0{{bj}h}0{{{b{dBn}}Cb}{{Ah{h{b{Bh}}}}}}{{{b{dBn}}Cb}{{Ah{C`{b{Bh}}}}}}{{{b{Bn}}{b{dl}}}n}{{{b{C`}}{b{dl}}}n}{cc{}}0{C`Cb}{C`Bd}{{}c{}}0{BnCd}22{B`Bn}{BnAf}{C`Af}0{BnBl}{C`Bl}0{{{b{dBn}}B`}{{Ah{h{b{Bh}}}}}}{{{b{dBn}}B`}{{Ah{{Bd{C`}}{b{Bh}}}}}}{bc{}}0{c{{Ah{e}}}{}{}}0{{}{{Ah{c}}}{}}0{bAj}0`{b{{b{c}}}{}}{{{b{d}}}{{b{dc}}}{}}{{{b{Cd}}}Cd}{{b{b{dc}}}h{}}{{bj}h}{{{b{Cd}}{b{dl}}}n}{cc{}}{{}c{}}{{{b{dCd}}{b{{Ab{j}}}}Af}{{Ah{h{b{Bh}}}}}}{B`Cd}{{{b{Cd}}Af}{{Ah{j{b{Bh}}}}}}{{{b{Cd}}Af}{{Ah{Af{b{Bh}}}}}}?>=<{{{b{dCd}}Afj}{{Ah{h{b{Bh}}}}}}{{{b{dCd}}AfAf}{{Ah{h{b{Bh}}}}}}```````````==<<{{{b{Cf}}}Cf}{{{b{Cb}}}Cb}<<;;{Af{{Ah{Cb{b{Bh}}}}}}{{{b{Cf}}{b{Cf}}}Bf}{{{b{Cb}}{b{Cb}}}Bf}{{{b{Cf}}{b{dl}}}n}{{{b{Cb}}{b{dl}}}n}>>{CbCh}>>{{CfjjjCh}Cb}{CbCf}{Cbj}00{bc{}}0{c{{Ah{e}}}{}{}}0{{}{{Ah{c}}}{}}0{bAj}0```````````````{{{b{dCj}}Cl}h}{{{b{dCj}}Bj}h}0{b{{b{c}}}{}}00{{{b{d}}}{{b{dc}}}{}}00{{{b{Cj}}}Cj}{{{b{Cl}}}Cl}{{{b{Cn}}}Cn}{{b{b{dc}}}h{}}00{{bj}h}00{CjBd}{{}Cj}{{{b{Cj}}{b{Cn}}{b{{D`{BjAf}}}}}{{Bb{Af}}}}{{{b{Cj}}{b{dl}}}n}{{{b{Cl}}{b{dl}}}n}{{{b{Cn}}{b{dl}}}n}{cc{}}00{{{b{dCj}}{b{Db}}}h}{{}c{}}0078{bc{}}00{c{{Ah{e}}}{}{}}00{{}{{Ah{c}}}{}}00{bAj}00{{{b{Cj}}{b{Cl}}{b{{D`{BjAf}}}}}Bf}{{{b{Cj}}{b{{D`{BjAf}}}}}Bf}>{DdCn}{DfCn}{DhAf}1{DhCn}33````````{DjAf}{b{{b{c}}}{}}00000{{{b{d}}}{{b{dc}}}{}}00000{{{b{Db}}}Db}{{{b{Dl}}}Dl}{{{b{Dj}}}Dj}{{{b{Dn}}}Dn}{{{b{E`}}}E`}{{b{b{dc}}}h{}}0000{{bj}h}0000{DbBn}{{{b{Db}}{b{dl}}}n}{{{b{Dl}}{b{dl}}}n}{{{b{Dj}}{b{dl}}}n}{{{b{Dn}}{b{dl}}}n}{{{b{E`}}{b{dl}}}n}{cc{}}00000{{{b{{Eb{c}}}}{b{dBn}}B`}{{Ah{Db{b{Bh}}}}}Ed}{{{b{{Ed{}{{Ef{c}}}}}}{b{Db}}}{{Ah{E`c}}}Eh}{{{b{{Eb{c}}}}{b{Db}}{Bd{Af}}{Bd{Af}}}DnEd}9{DlCb}{DlBd}{{}c{}}00000{DjBf}2{c{{Eb{c}}}Ed}{DlAf}0{DnBd}{{{b{{Eb{c}}}}{b{Db}}}{{Ah{E`}}}Ed}1{DlBl}0{DlB`}{DbBd}{bc{}}0000{DnDb}{E`Bd}{c{{Ah{e}}}{}{}}00000{{}{{Ah{c}}}{}}00000{bAj}00000{DjAf}04```````{b{{b{c}}}{}}000000{{{b{d}}}{{b{dc}}}{}}000000{{{b{Ej}}}Ej}{{{b{El}}}El}{{{b{En}}}En}{{{b{F`}}}F`}{{{b{Fb}}}Fb}{{{b{Fd}}}Fd}{{b{b{dc}}}h{}}00000{{bj}h}00000{ElBd}{FbBd}{EjBd}{F`Bd}{{}Ff}{c{{Ah{F`}}}Fh}{c{{Ah{Fb}}}Fh}{c{{Ah{Fd}}}Fh}{FfAf}87{{{b{Ej}}{b{dl}}}n}{{{b{El}}{b{dl}}}n}{{{b{En}}{b{dl}}}n}{{{b{F`}}{b{dl}}}n}{{{b{Fb}}{b{dl}}}n}{{{b{Fd}}{b{dl}}}n}{EjEl}{F`Fb}{cc{}}000000{{{b{Ff}}{b{Db}}}{{Ah{E`c}}}{}}{EnB`}{FdB`}{{}c{}}000000{EnBd}{FdBd}{EjBd}{F`Bd}{{AfAf}Ff}{ElBd}{FbBd}{FfAf}{{{b{F`}}c}AhFj}{{{b{Fb}}c}AhFj}{{{b{Fd}}c}AhFj}{bc{}}00000{EjAd}{F`Bl}{c{{Ah{e}}}{}{}}000000{{}{{Ah{c}}}{}}000000{bAj}000000{EnAf}{FdAf}`````{b{{b{c}}}{}}00{{{b{d}}}{{b{dc}}}{}}00{{}Fl}{{{b{Fn}}{b{dl}}}n}{cc{}}00{{}c{}}00{c{{G`{c}}}Gb}{AfFl}{FlAf}===<<<;;;{{{b{{G`{c}}}}{b{E`}}{b{{Ab{j}}}}}{{Ah{Bf}}}Gb}{{{b{{Gb{}{{Ef{c}}}}}}{b{E`}}{b{{Ab{j}}}}}{{Ah{Bfc}}}Eh}{{{b{Fl}}{b{E`}}{b{{Ab{j}}}}}{{Ah{Bfc}}}{}}{{{b{Fn}}{b{E`}}{b{{Ab{j}}}}}{{Ah{Bfc}}}{}}","D":"Gf","p":[[1,"reference",null,null,1],[0,"mut"],[5,"SimpleHash",21],[1,"unit"],[1,"u8"],[5,"Formatter",509],[8,"Result",509],[10,"HashFunction",21],[1,"slice"],[8,"HashValue",21],[1,"u32"],[6,"Result",510,null,1],[5,"TypeId",511],[5,"MerkleTree",41],[5,"MerkleProof",41],[1,"usize"],[6,"Option",512,null,1],[5,"Vec",513],[1,"bool"],[1,"str"],[5,"String",514],[1,"array"],[5,"VmState",82],[5,"ExecutionStep",82],[5,"Instruction",143],[5,"Memory",124],[6,"Opcode",143],[1,"i32"],[5,"ConstraintSystem",191],[6,"Constraint",191],[6,"Expression",191],[5,"HashMap",515],[5,"ExecutionTrace",257],[15,"MemoryConsistency",250],[15,"Equality",250],[15,"RangeCheck",250],[5,"MemoryAccess",257],[5,"TraceStep",257],[5,"WitnessData",257],[5,"Proof",257],[5,"Prover",257],[10,"ProofSystem",257],[17,"Error"],[10,"Debug",509],[5,"StarkProof",357],[5,"FriProof",357],[5,"QueryProof",357],[5,"SerializableStarkProof",357],[5,"SerializableFriProof",357],[5,"SerializableQueryProof",357],[5,"StarkProver",357],[10,"Deserializer",516],[10,"Serializer",517],[5,"StarkVerifier",474],[5,"MockVerificationSystem",474],[5,"Verifier",474],[10,"VerificationSystem",474]],"r":[[0,191],[1,82],[2,257],[3,21],[4,143],[5,41],[6,143],[7,257],[8,257],[9,357],[10,474],[11,474],[12,82],[14,75],[15,75]],"b":[],"c":"OjAAAAAAAAA=","e":"OzAAAAEAAMIBEwABAAwADwABABQACgAgAAQAJgARADoAAQA+ACQAZQABAGkAGgCGACMArAAAAK8AMwDmAAAA6gBBADIBBQA+AWEApwECALEBNgDuAQ8A","P":[[24,"T"],[26,""],[27,"T"],[28,""],[30,"T"],[31,""],[36,"U"],[37,"T"],[38,"U,T"],[39,"U"],[40,""],[43,"T"],[47,""],[49,"T"],[51,""],[55,"T"],[57,""],[59,"U"],[61,""],[65,"T"],[67,"U,T"],[69,"U"],[71,""],[84,"T"],[88,""],[90,"T"],[92,""],[98,"T"],[100,""],[102,"U"],[104,""],[116,"T"],[118,"U,T"],[120,"U"],[122,""],[125,"T"],[127,""],[128,"T"],[129,""],[131,"T"],[132,"U"],[133,""],[137,"T"],[138,"U,T"],[139,"U"],[140,""],[154,"T"],[158,""],[160,"T"],[162,""],[169,"T"],[171,""],[172,"U"],[174,""],[179,"T"],[181,"U,T"],[183,"U"],[185,""],[205,"T"],[211,""],[214,"T"],[217,""],[226,"T"],[229,""],[230,"U"],[233,""],[235,"T"],[238,"U,T"],[241,"U"],[244,""],[266,"T"],[278,""],[283,"T"],[288,""],[299,"T"],[305,"P"],[306,"ProofSystem::Error"],[307,"P"],[308,""],[311,"U"],[317,""],[319,"P"],[320,""],[323,"P"],[324,""],[329,"T"],[334,""],[336,"U,T"],[342,"U"],[348,""],[364,"T"],[378,""],[384,"T"],[390,""],[401,"__D"],[404,""],[415,"T"],[422,"ProofSystem::Error"],[423,""],[425,"U"],[432,""],[440,"__S"],[443,"T"],[449,""],[451,"U,T"],[458,"U"],[465,""],[479,"T"],[485,""],[487,"T"],[490,"U"],[493,"V"],[494,""],[496,"U,T"],[499,"U"],[502,""],[505,"V"],[506,"VerificationSystem::Error"]]}]]'));
if (typeof exports !== 'undefined') exports.searchIndex = searchIndex;
else if (window.initSearch) window.initSearch(searchIndex);
//{"start":39,"fragment_lengths":[222,12130]}